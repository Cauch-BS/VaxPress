# Example code to define the length of fragments generated by a restriction enzyme cut.

from vaxpress.scoring import ScoringFunction

class RestrictionSiteFitness(ScoringFunction):

    # If True, the scoring function is called for each individual sequence.
    single_submission = False

    name = "restriction"               # used as an argument prefix, e.g. "--restriction-weight"
    description = "Restriction Site"   # Description shown in help message
    priority = 100                     # Affects the order in which the scoring function is displayed in the help message
    
    # Define arguments for your scoring function here.
    arguments = [
        ('weight', dict(
            type=float, default=100.0, 
            help='scoring weight for restriction site (default: 100.0)')),
        ('restriction-site', dict(
            default=None, type=str, help='restriction site sequence (default: None)')),
        ('cut-length-min', dict(
            default=1, type=int, help='minimum length of the first fragment (default: 1)')),
        ('cut-length-max', dict(
            default=1000, type=int, help='maximum length of the first fragment (default: 1000)')),
    ]

    # Initialize the scoring function with the given arguments.
    def __init__(self, weight, restriction_site, cut_length_min, cut_length_max):  
        self.weight = weight
        self.restriction_site = restriction_site
        self.cut_length_min = cut_length_min
        self.cut_length_max = cut_length_max
    
    # This is where your code for calculating desired metrics & scores goes. 
    def score(self, seqs):  

        if self.restriction_site is None:
            raise ValueError('restriction site sequence is not specified')

        if len(seqs[0]) < self.cut_length_min:
            raise ValueError('sequence is shorter than minimum fragment length')
        
        is_passed = []  # Initialize list to store 0 or 1 values for each sequence.
        scores = []     # Initialize list to store the final scores for each sequence.

        for s in seqs:

            # (1) Check if the restriction site is present in the sequence
            if self.restriction_site in s:
                fragments = s.split(self.restriction_site)
                
                # (2) Check if all fragments meet the length criteria
                all_fragments_valid = True

                for fragment in fragments:
                    if not self.cut_length_min <= len(fragment) <= self.cut_length_max:
                        all_fragments_valid = False
                        break
  
                # If all fragments meet the length criteria, gives 1
                if all_fragments_valid:
                    is_passed.append(1)  
                # If not all the fragments meet length criteria, gives 0
                else:
                    is_passed.append(0) 
            
            # If the sequence does not contain the restriction site, gives 0
            else:
                is_passed.append(0) 
        
        for v in is_passed:
            scores.append(v * self.weight) 
        
        # Return scores and metrics
        return {'is_passed': scores}, {'is_passed': is_passed}